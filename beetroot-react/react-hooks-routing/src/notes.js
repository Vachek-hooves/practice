// Ідея: Зробити під'єм стану. Коли з батька в дитину передається якесь значення, а потім в батькові це значення опряцьовувати відносно того що змінилося в дитині вказувати якийсь текст або інщі маніпуляціх. (така собі синхронізація).

// ParentHooks- функціональна компонента-це функція.

// Intro.
// фунцірнальні компоненти- це презентаційні компоненти, тобто (stateless component)
// Класовий компонент- повноцінний компонент з логікою (statefull component)
// Але в такому поділі була проблема. У ході доопрацювань або внесення змін в проєкт, в них доводилось додавати state. І починалася робота з state. Означає,що існуючу функціональну компоненту доводилося переносити на класову. Тому в React 16.8 ввели HOOKS. Hook- дозволили використовувати стани і всі інші можливості React, без використання класових компонентів. (по суті відмовились від классової компоненти) і весь функціонал який в ній дозволили робити у функціональній компоненті.

// Hooks-це вбудовані фунції в реакті які дозволяють у функціональній компонеті працювати зі State, із функціями життєвого циклу компоненти.
// Hooks - не працюють у класових компонентах. (Вся логіка яка була в class compoents відсутня в functional)

// У функціолнальній компоненті значення state побудоване на хуках.
// 1-й hook це хук стану (оголошення state).

// Є два хуки:

// useEffect (аналог componentDidUpdate) - його логіка ігнорується. React запускає логіку, будує DOM не чекаючи поки виконається useEffect.(При запиті на API, компонента "промальовується" не чекаючи завершеня запиту). Може використовуватись безліч разів.

// useLayoutEffect(componentDidMount) - Спочатку запускається все що всередині цього хука а потім будується DOM.( При запиті на API, компонента чекає поки запит відбудеться, данні отримаються а потім працює компонента). Використовується тільки один раз.

// Resize- тут буде приклад роботи з функціональною компонентою.